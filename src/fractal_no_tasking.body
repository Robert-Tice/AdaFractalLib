package body Fractal is

   procedure Init (Viewport : Viewport_Info)
   is
   begin
      S_Width := Viewport.Width;
      S_Height := Viewport.Height;
      S_Zoom := Viewport.Zoom;

      S_Center := Complex_Coordinate'(Re => To_Real (0),
                                      Im => To_Real (0));

      Calculate_Bounds;
      Calculate_Step;
   end Init;

   procedure Set_Size (Viewport : Viewport_Info)
   is
   begin
      S_Width := Viewport.Width;
      S_Height := Viewport.Height;
      S_Zoom := Viewport.Zoom;


      S_Center := Get_Coordinate (Coord => Viewport.Center);

      Calculate_Bounds;
      Calculate_Step;
   end Set_Size;

   function Get_Coordinate (X : ImgWidth;
                            Y : ImgHeight)
                            return Complex_Coordinate
   is
      Real_Coord : constant Real := S_Min.Re + F_To_Real (Float (X) * To_Float (S_Step.Re));
      Imag_Coord : constant Real := S_Min.Im + F_To_Real (Float (Y) * To_Float (S_Step.Im));
   begin
      return Complex_Coordinate'(Re => Real_Coord,
                                 Im => Imag_Coord);
   end Get_Coordinate;

   procedure Calculate_Bounds
   is
      Half_Real_Dist, Half_Imag_Dist : Real;

      Inv_Aspect_Ratio               : constant Real := F_To_Real(
                                         Float (S_Height) /
                                         Float (S_Width));
   begin
      Half_Real_Dist := Real_Distance_Unzoomed * To_Real (10) /
        (To_Real (S_Zoom) * To_Real (2));
      Half_Imag_Dist := Inv_Aspect_Ratio * Half_Real_Dist;

      S_Max.Re := Half_Real_Dist + S_Center.Re;
      S_Min.Re := S_Center.Re - Half_Real_Dist;

      if S_Max.Re > Real_Distance_Unzoomed / To_Real (2) then
         S_Max.Re := Real_Distance_Unzoomed / To_Real (2);
      end if;
      if S_Min.Re < Real_Distance_Unzoomed / To_Real (-2) then
         S_Min.Re := Real_Distance_Unzoomed / To_Real (-2);
      end if;

      S_Max.Im := Half_Imag_Dist + S_Center.Im;
      S_Min.Im := S_Center.Im - Half_Imag_Dist;

      if S_Max.Im > Real_Distance_Unzoomed * Inv_Aspect_Ratio / To_Real (2) then
         S_Max.Im := Real_Distance_Unzoomed * Inv_Aspect_Ratio / To_Real (2);
      end if;
      if S_Min.Im < Real_Distance_Unzoomed * Inv_Aspect_Ratio / To_Real (-2) then
         S_Min.Im := Real_Distance_Unzoomed * Inv_Aspect_Ratio / To_Real(-2);
      end if;
   end Calculate_Bounds;

   procedure Calculate_Step
   is
   begin
      S_Step.Re := F_To_Real (To_Float (S_Max.Re - S_Min.Re) / Float (S_Width));
      S_Step.Im := F_To_Real (To_Float (S_Max.Im - S_Min.Im) / Float (S_Height));
   end Calculate_Step;

   procedure Calculate_Image (Buffer : not null Buffer_Access)
   is
   begin

      for I in 1 .. Get_Height loop
         Calculate_Row (Y      => I,
                        Idx    => Buffer'First +
                          Buffer_Offset ((I - 1) *
                                Get_Width * Pixel'Size / 8),
                        Buffer => Buffer);
      end loop;
   end Calculate_Image;

--     procedure Calculate_Pixel_Color (Z_Escape     : Real;
--                                      Iter_Escape  : Natural;
--                                      Px           : out Pixel)
--     is
--        Value : constant Integer := 765 * (Iter_Escape - 1) / Max_Iterations;
--     begin
--        if Z_Escape > To_Real (4) then
--           if Value > 510 then
--              Px := Pixel'(Red   => Color'Last - S_Frame_Counter,
--                           Green => Color'Last,
--                           Blue  => Color (Value rem Integer (Color'Last)),
--                           Alpha => Color'Last);
--           elsif Value > 255 then
--              Px := Pixel'(Red   => Color'Last - S_Frame_Counter,
--                           Green => Color (Value rem Integer (Color'Last)),
--                           Blue  => Color'First + S_Frame_Counter,
--                           Alpha => Color'Last);
--           else
--              Px := Pixel'(Red   => Color (Value rem Integer (Color'Last)),
--                           Green => Color'First + S_Frame_Counter,
--                           Blue  => Color'First,
--                           Alpha => Color'Last);
--           end if;
--        else
--           Px := Pixel'(Red   => Color'First + S_Frame_Counter,
--                        Green => Color'First + S_Frame_Counter,
--                        Blue  => Color'First + S_Frame_Counter,
--                        Alpha => Color'Last);
--        end if;
--
--     end Calculate_Pixel_Color;

--     procedure Increment_Frame
--     is
--     begin
--        if S_Cnt_Up then
--           if S_Frame_Counter = Color'Last then
--              S_Cnt_Up := not S_Cnt_Up;
--              return;
--           else
--              S_Frame_Counter := S_Frame_Counter + 5;
--              return;
--           end if;
--        end if;
--
--        if S_Frame_Counter = Color'First then
--           S_Cnt_Up := not S_Cnt_Up;
--           return;
--        end if;
--
--        S_Frame_Counter := S_Frame_Counter - 5;
--     end Increment_Frame;

   procedure Calculate_Row (Y      : ImgHeight;
                            Idx    : Buffer_Offset;
                            Buffer : not null Buffer_Access)
   is

      Line : Pixel_Array (1 .. Get_Width)
        with Address => Buffer (Idx)'Address;
      Coord : Complex_Coordinate;

      Z_Esc : Real;
      I_Esc : Natural;

      Escape_Thresh : Boolean;
   begin
      for X in Line'Range loop
         Coord := Get_Coordinate (X => X,
                                  Y => Y);
         Calculate_Pixel (Re          => Coord.Re,
                          Im          => Coord.Im,
                          Z_Escape    => Z_Esc,
                          Iter_Escape => I_Esc);

         pragma Warnings (Off);
         if Z_Esc > To_Real (4) then
            Escape_Thresh := True;
         else
            Escape_Thresh := False;
         end if;
         IT.Color_Pixel (Z_Escape => Escape_Thresh,
                         Iter_Escape => I_Esc,
                         Px          => Line (X));
         pragma Warnings (On);
      end loop;
   end Calculate_Row;

end Fractal;
